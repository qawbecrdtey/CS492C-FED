{"ast":null,"code":"var _jsxFileName = \"/Users/dain/Documents/2021_fall/FE\\u1100\\u1162\\u1107\\u1161\\u11AF/project/CLIENT/CS492C-FED/client/src/page/post/markdown.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport * as React from \"react\";\nimport ReactMde from \"react-mde\";\nimport ReactDOM from \"react-dom\";\nimport * as Showdown from \"showdown\";\nimport \"./markdownStyles.css\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction loadSuggestions(text) {\n  return new Promise((accept, reject) => {\n    setTimeout(() => {\n      const suggestions = [{\n        preview: \"Andre\",\n        value: \"@andre\"\n      }, {\n        preview: \"Angela\",\n        value: \"@angela\"\n      }, {\n        preview: \"David\",\n        value: \"@david\"\n      }, {\n        preview: \"Louise\",\n        value: \"@louise\"\n      }].filter(i => i.preview.toLowerCase().includes(text.toLowerCase()));\n      accept(suggestions);\n    }, 250);\n  });\n}\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\nexport default function App() {\n  _s();\n\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n\n  const save = async function* (data) {\n    // Promise that waits for \"time\" milliseconds\n    const wait = function (time) {\n      return new Promise((a, r) => {\n        setTimeout(() => a(), time);\n      });\n    }; // Upload \"data\" to your server\n    // Use XMLHttpRequest.send to send a FormData object containing\n    // \"data\"\n    // Check this question: https://stackoverflow.com/questions/18055422/how-to-receive-php-image-data-over-copy-n-paste-javascript-with-xmlhttprequest\n\n\n    await wait(2000); // yields the URL that should be inserted in the markdown\n\n    yield \"https://picsum.photos/300\";\n    await wait(2000); // returns true meaning that the save was successful\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uAC8C\\uC2DC\\uAE00 \\uC791\\uC131 \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uC81C\\uBAA9\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uAE00 \\uC791\\uC131\\uC790\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"name\",\n          id: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMde, {\n      value: value,\n      onChange: setValue,\n      selectedTab: selectedTab,\n      onTabChange: setSelectedTab,\n      generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n      loadSuggestions: loadSuggestions,\n      childProps: {\n        writeButton: {\n          tabIndex: -1\n        }\n      },\n      paste: {\n        saveImage: save\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\uB4F1\\uB85D\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\uBAA9\\uB85D\\uC73C\\uB85C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KNWtYasFUcobVmFRGe/pPP5VUJI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dain/Documents/2021_fall/FE개발/project/CLIENT/CS492C-FED/client/src/page/post/markdown.js"],"names":["React","ReactMde","ReactDOM","Showdown","loadSuggestions","text","Promise","accept","reject","setTimeout","suggestions","preview","value","filter","i","toLowerCase","includes","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","App","setValue","useState","selectedTab","setSelectedTab","save","data","wait","time","a","r","markdown","resolve","makeHtml","writeButton","tabIndex","saveImage"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport * as React from \"react\";\nimport ReactMde from \"react-mde\";\nimport ReactDOM from \"react-dom\";\nimport * as Showdown from \"showdown\";\nimport \"./markdownStyles.css\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nfunction loadSuggestions(text) {\n  return new Promise((accept, reject) => {\n    setTimeout(() => {\n      const suggestions = [\n        {\n          preview: \"Andre\",\n          value: \"@andre\"\n        },\n        {\n          preview: \"Angela\",\n          value: \"@angela\"\n        },\n        {\n          preview: \"David\",\n          value: \"@david\"\n        },\n        {\n          preview: \"Louise\",\n          value: \"@louise\"\n        }\n      ].filter((i) => i.preview.toLowerCase().includes(text.toLowerCase()));\n      accept(suggestions);\n    }, 250);\n  });\n}\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"**Hello world!!!**\");\n  const [selectedTab, setSelectedTab] = React.useState(\"write\");\n\n  const save = async function* (data) {\n    // Promise that waits for \"time\" milliseconds\n    const wait = function (time) {\n      return new Promise((a, r) => {\n        setTimeout(() => a(), time);\n      });\n    };\n\n    // Upload \"data\" to your server\n    // Use XMLHttpRequest.send to send a FormData object containing\n    // \"data\"\n    // Check this question: https://stackoverflow.com/questions/18055422/how-to-receive-php-image-data-over-copy-n-paste-javascript-with-xmlhttprequest\n\n    await wait(2000);\n    // yields the URL that should be inserted in the markdown\n    yield \"https://picsum.photos/300\";\n    await wait(2000);\n\n    // returns true meaning that the save was successful\n    return true;\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>\n        게시글 작성 페이지\n      </h1>\n      <div>\n        <div>\n          제목\n          <input type=\"text\" id=\"title\"></input>\n        </div>\n        <div>\n          글 작성자\n          <input type=\"name\" id=\"name\"></input>\n        </div>\n        \n      </div>\n      <ReactMde\n        value={value}\n        onChange={setValue}\n        selectedTab={selectedTab}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter.makeHtml(markdown))\n        }\n        loadSuggestions={loadSuggestions}\n        childProps={{\n          writeButton: {\n            tabIndex: -1\n          }\n        }}\n        paste={{\n          saveImage: save\n        }}\n      />\n      <button>\n        등록하기\n      </button>\n      <button>\n        목록으로\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}